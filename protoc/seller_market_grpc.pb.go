// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: seller_market.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SellerMarketClient is the client API for SellerMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerMarketClient interface {
	RegisterSeller(ctx context.Context, in *RegisterSellerRequest, opts ...grpc.CallOption) (*RegisterSellerResponse, error)
	SellItem(ctx context.Context, in *SellItemRequest, opts ...grpc.CallOption) (*SellItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	DisplayItems(ctx context.Context, in *DisplayItemsRequest, opts ...grpc.CallOption) (*DisplayItemsResponse, error)
}

type sellerMarketClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerMarketClient(cc grpc.ClientConnInterface) SellerMarketClient {
	return &sellerMarketClient{cc}
}

func (c *sellerMarketClient) RegisterSeller(ctx context.Context, in *RegisterSellerRequest, opts ...grpc.CallOption) (*RegisterSellerResponse, error) {
	out := new(RegisterSellerResponse)
	err := c.cc.Invoke(ctx, "/seller_market/registerSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerMarketClient) SellItem(ctx context.Context, in *SellItemRequest, opts ...grpc.CallOption) (*SellItemResponse, error) {
	out := new(SellItemResponse)
	err := c.cc.Invoke(ctx, "/seller_market/sellItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerMarketClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/seller_market/updateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerMarketClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/seller_market/deleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerMarketClient) DisplayItems(ctx context.Context, in *DisplayItemsRequest, opts ...grpc.CallOption) (*DisplayItemsResponse, error) {
	out := new(DisplayItemsResponse)
	err := c.cc.Invoke(ctx, "/seller_market/displayItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerMarketServer is the server API for SellerMarket service.
// All implementations must embed UnimplementedSellerMarketServer
// for forward compatibility
type SellerMarketServer interface {
	RegisterSeller(context.Context, *RegisterSellerRequest) (*RegisterSellerResponse, error)
	SellItem(context.Context, *SellItemRequest) (*SellItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	DisplayItems(context.Context, *DisplayItemsRequest) (*DisplayItemsResponse, error)
	mustEmbedUnimplementedSellerMarketServer()
}

// UnimplementedSellerMarketServer must be embedded to have forward compatible implementations.
type UnimplementedSellerMarketServer struct {
}

func (UnimplementedSellerMarketServer) RegisterSeller(context.Context, *RegisterSellerRequest) (*RegisterSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSeller not implemented")
}
func (UnimplementedSellerMarketServer) SellItem(context.Context, *SellItemRequest) (*SellItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellItem not implemented")
}
func (UnimplementedSellerMarketServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedSellerMarketServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedSellerMarketServer) DisplayItems(context.Context, *DisplayItemsRequest) (*DisplayItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayItems not implemented")
}
func (UnimplementedSellerMarketServer) mustEmbedUnimplementedSellerMarketServer() {}

// UnsafeSellerMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerMarketServer will
// result in compilation errors.
type UnsafeSellerMarketServer interface {
	mustEmbedUnimplementedSellerMarketServer()
}

func RegisterSellerMarketServer(s grpc.ServiceRegistrar, srv SellerMarketServer) {
	s.RegisterService(&SellerMarket_ServiceDesc, srv)
}

func _SellerMarket_RegisterSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerMarketServer).RegisterSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller_market/registerSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerMarketServer).RegisterSeller(ctx, req.(*RegisterSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerMarket_SellItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerMarketServer).SellItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller_market/sellItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerMarketServer).SellItem(ctx, req.(*SellItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerMarket_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerMarketServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller_market/updateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerMarketServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerMarket_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerMarketServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller_market/deleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerMarketServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerMarket_DisplayItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerMarketServer).DisplayItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller_market/displayItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerMarketServer).DisplayItems(ctx, req.(*DisplayItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SellerMarket_ServiceDesc is the grpc.ServiceDesc for SellerMarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellerMarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seller_market",
	HandlerType: (*SellerMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerSeller",
			Handler:    _SellerMarket_RegisterSeller_Handler,
		},
		{
			MethodName: "sellItem",
			Handler:    _SellerMarket_SellItem_Handler,
		},
		{
			MethodName: "updateItem",
			Handler:    _SellerMarket_UpdateItem_Handler,
		},
		{
			MethodName: "deleteItem",
			Handler:    _SellerMarket_DeleteItem_Handler,
		},
		{
			MethodName: "displayItems",
			Handler:    _SellerMarket_DisplayItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seller_market.proto",
}

// MarketSellerClient is the client API for MarketSeller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketSellerClient interface {
	NotifyClient(ctx context.Context, in *NotifyClientRequest, opts ...grpc.CallOption) (*NotifyClientResponse, error)
}

type marketSellerClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketSellerClient(cc grpc.ClientConnInterface) MarketSellerClient {
	return &marketSellerClient{cc}
}

func (c *marketSellerClient) NotifyClient(ctx context.Context, in *NotifyClientRequest, opts ...grpc.CallOption) (*NotifyClientResponse, error) {
	out := new(NotifyClientResponse)
	err := c.cc.Invoke(ctx, "/market_seller/NotifyClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketSellerServer is the server API for MarketSeller service.
// All implementations must embed UnimplementedMarketSellerServer
// for forward compatibility
type MarketSellerServer interface {
	NotifyClient(context.Context, *NotifyClientRequest) (*NotifyClientResponse, error)
	mustEmbedUnimplementedMarketSellerServer()
}

// UnimplementedMarketSellerServer must be embedded to have forward compatible implementations.
type UnimplementedMarketSellerServer struct {
}

func (UnimplementedMarketSellerServer) NotifyClient(context.Context, *NotifyClientRequest) (*NotifyClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClient not implemented")
}
func (UnimplementedMarketSellerServer) mustEmbedUnimplementedMarketSellerServer() {}

// UnsafeMarketSellerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketSellerServer will
// result in compilation errors.
type UnsafeMarketSellerServer interface {
	mustEmbedUnimplementedMarketSellerServer()
}

func RegisterMarketSellerServer(s grpc.ServiceRegistrar, srv MarketSellerServer) {
	s.RegisterService(&MarketSeller_ServiceDesc, srv)
}

func _MarketSeller_NotifyClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketSellerServer).NotifyClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market_seller/NotifyClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketSellerServer).NotifyClient(ctx, req.(*NotifyClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketSeller_ServiceDesc is the grpc.ServiceDesc for MarketSeller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketSeller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market_seller",
	HandlerType: (*MarketSellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyClient",
			Handler:    _MarketSeller_NotifyClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seller_market.proto",
}
